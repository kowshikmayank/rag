#!/usr/bin/env python3

from __future__ import print_function

import logging
import os
import signal
import subprocess
import sys

server_timeout = os.environ.get("SERVER_TIMEOUT", 60)
server_workers = int(os.environ.get("SERVER_WORKERS", 1))

log = logging.getLogger("serve")


def sigterm_handler(nginx_pid, gunicorn_pid):
    log.warning("Stopping inference server because one of the child processes has exited")
    try:
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError:
        pass
    try:
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError:
        pass
    sys.exit(0)


def start_server():
    nginx = subprocess.Popen(['nginx', '-c', '/opt/documaster/config/nginx.conf'])
    log.info("Started nginx (pid {})".format(nginx.pid))

    gunicorn = subprocess.Popen(
        [
            "gunicorn",
            "--timeout",
            str(server_timeout),
            "-k",
            "gevent",
            "-b",
            "unix:/tmp/gunicorn.sock",
            "-w",
            str(server_workers),
            "wsgi:application",
        ]
    )

    signal.signal(signal.SIGTERM, lambda a,
                  b: sigterm_handler(nginx.pid, gunicorn.pid))

    # If either subprocess exits, so do we.
    pids = set([nginx.pid, gunicorn.pid])
    while True:
        pid, exitcode = os.wait()
        if pid in pids:
            log.info("PID {} returned with exit code {}".format(pid, exitcode))
            break
    sigterm_handler(nginx.pid, gunicorn.pid)

# The main routine just invokes the start function.

if __name__ == "__main__":
    start_server()
